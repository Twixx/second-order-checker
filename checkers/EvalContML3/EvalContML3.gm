(*
  ML1: À°¿ô (represented by int) + »°Â§±é»» + ¿¿µ¶ÃÍ + If + Èæ³Ó±é»» 
  ML2: ML1 + let (´Ä¶­)
  ML3: ML2 + fun (´Ø¿ôÃê¾Ý¡¦Å¬ÍÑ) + let rec (ºÆµ¢´Ø¿ôÄêµÁ)
  ContML3: ML3 + letcc (·ÑÂ³)
*)

[Syntax]

i in int

b in bool

x,y in Var

v in Value ::= i | b | Fun(env, x, e) | Rec(env, x, y, e) | ContF(k)

env in Env ::= Empty
            |  Bind(env,x,v)

e in Exp ::= i
          | b
          | x
          | BinOp(op, e, e)   (* e op e *)
          | If(e, e, e)       (* if e then e else e *)
          | Let(x, e, e)      (* let x = e in e *)
          | Abs(x, e)         (* fun x -> e *)
          | App(e, e)         (* e e *)
          | LetRec(x, y, e, e)  (* let rec x y = e in e *)
          | LetCc(x,e)          (* let cc x in e *)

op in Prim ::= Plus | Minus | Mult | Lt

k in Cont ::= RetK                 (* [] *)
           | EvalRK(env,e,op,k)    (* {env |- [] op e} >> k *)
           | AppOpK(v,op,k)        (* {v op []} >> k *)
           | BranchK(env,e,e,k)    (* {env |- if [] then e else e} >> k *)
           | LetBodyK(env,x,e,k)   (* {env |- let x = [] in e} >> k *)
           | EvalArgK(env,e,k)     (* {env |- [] e} >> k *)
           | AppFunK(v,k)          (* {v []} >> k *)

[Judgments]

EvalTo(env, k, e; v)   (* E |- e >> k evalto v *)
                        (* "E |- e evalto v" abbreviates "E |- e >> [] evalto v" *)
AppK(k,v; v)           (* v >> k evalto v *)
AppBOp(op, v, v; v)

[Rules]
AppK(k, i, v)
--------------------E-Int
EvalTo(env, k, i, v)
;

AppK(k, b, v)
--------------------E-Bool
EvalTo(env, k, b, v)
;

EvalTo(env, BranchK(env,e2,e3,k), e1, v)
------------------------------------------E-If
EvalTo(env, k, If(e1, e2, e3), v)
;

EvalTo(env, EvalRK(env,e2,op,k), e1, v)
----------------------------------------E-BinOp
EvalTo(env, k, BinOp(op, e1, e2), v)
;

`try $v1 = lookup $env $k $x with LookupFailure -> false`
`$v1 = lookup $env $k $x` AppK(k, v1, v2)
--------------------------------------------------------E-Var
EvalTo(env, k, x, v2)
;

EvalTo(env, LetBodyK(env,x,e2,k), e1, v)
----------------------------------------E-Let
EvalTo(env, k, Let(x, e1, e2), v)
;
AppK(k, Fun(env, x, e), v)
--------------------------------------E-Fun
EvalTo(env, k, Abs(x, e), v)
;
EvalTo(env, EvalArgK(env,e2,k), e1, v)
--------------------------------------E-App
EvalTo(env, k, App(e1, e2), v)
;
EvalTo(Bind(env, x, Rec(env,x,y,e1)), k, e2, v)
--------------------------------------------------E-LetRec
EvalTo(env, k, LetRec(x,y,e1,e2), v)
;
EvalTo(Bind(env,x,ContF(k)), k, e, v)
--------------------------------------E-LetCc
EvalTo(env, k, LetCc(x, e), v)
;

--------------------------------------C-Ret
AppK(RetK, v, v)
;

EvalTo(env, AppOpK(v1,op,k), e, v2)
--------------------------------------C-EvalR
AppK(EvalRK(env,e,op,k), v1, v2)
;

AppBOp(Plus, i1, i2, i3) AppK(k, i3, v)
--------------------------------------C-Plus
AppK(AppOpK(i1,Plus,k), i2, v)
;

AppBOp(Minus, i1, i2, i3) AppK(k, i3, v)
--------------------------------------C-Minus
AppK(AppOpK(i1,Minus,k), i2, v)
;

AppBOp(Mult, i1, i2, i3) AppK(k, i3, v)
--------------------------------------C-Times
AppK(AppOpK(i1,Mult,k), i2, v)
;

AppBOp(Lt, i1, i2, b3) AppK(k, b3, v)
--------------------------------------C-Lt
AppK(AppOpK(i1,Lt,k), i2, v)
;

EvalTo(env, k, e1, v)
--------------------------------------C-IfT
AppK(BranchK(env,e1,e2,k), true, v)
;

EvalTo(env, k, e2, v)
--------------------------------------C-IfF
AppK(BranchK(env,e1,e2,k), false, v)
;

EvalTo(Bind(env, x, v1), k, e, v2)
--------------------------------------C-LetBody
AppK(LetBodyK(env,x,e,k), v1, v2)
;

EvalTo(env, AppFunK(v1, k), e, v)
--------------------------------------C-EvalArg
AppK(EvalArgK(env, e, k), v1, v)
;

EvalTo(Bind(env,x,v1), k, e, v2)
--------------------------------------C-EvalFun
AppK(AppFunK(Fun(env, x, e), k), v1, v2)
;

EvalTo(Bind(Bind(env, x, Rec(env,x,y,e)), y, v1), k, e, v2)
----------------------------------------------------------C-EvalFunR
AppK(AppFunK(Rec(env, x, y, e), k), v1, v2)
;

AppK(k1, v1, v2)
--------------------------------------C-EvalFunC
AppK(AppFunK(ContF(k1), k2), v1, v2)
;

`$i3 = $i1 + $i2`
------------------------B-Plus
AppBOp(Plus, i1, i2, i3)
;

`$i3 = $i1 - $i2`
---------------------------B-Minus
AppBOp(Minus, i1, i2, i3)
;

`$i3 = $i1 * $i2`
-------------------------B-Times
AppBOp(Mult, i1, i2, i3)
;

`$b3 = ($i1 < $i2)`
-----------------------B-Lt
AppBOp(Lt, i1, i2, b3)


[ML]
exception LookupFailure

let rec lookup env k x =
    match env with
      Empty -> raise LookupFailure
    | Bind(env, x', v') -> if x = x' then v' else lookup env k x
