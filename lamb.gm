[Syntax]

t in Term with var x, y, z ::= LetRec<x,y>(t[x,y], t[x])
            | App(t, t)
            | v

v in Value ::= Lamb<x>(t[x]) | x


[Judgments]
DeriveTo(t, t)

[Rules]
DeriveTo(t1, t2)
----------------------------------E-APP1
DeriveTo(App(t1, t3), App(t2, t3))
;
DeriveTo(t1, t2)
----------------------------------------------E-APP2
DeriveTo(App(v1, t1), App(v1, t2))
;
-----------------------------------------E-AppAbs
DeriveTo(App(Lamb<x>(t1[x]), t2), t1[t2])
;
(x)[DeriveTo(t1[x], t2[x])]
----------------------------------------E-AppFull
DeriveTo(Lamb<x>(t1[x]), Lamb<x>(t2[x]))
;
----------------------------------------------E-LetRec
DeriveTo(LetRec<x,y>(t1[x,y], t2[x]), t2[Lamb<z>(LetRec<x,y>(t1[x,y], t1[x,z]))])
