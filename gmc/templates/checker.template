open Ast
open Unify

(* functions to check the number of premises *)
exception InvalidRulename of string * info
exception PremError of int * int
exception AbsError of int * int * info
exception JudgError of info
exception UnknownError

let check_qexprs max_vars f stream =
    let vars = Array.make max_vars (Proj 0) in
    let rec check_qexpr = function
        | None -> false
        | Some { Sstream.guess = guess; next = next } ->
                let filter_sub { Ast.met = i; sub = c } =
                    if i >= 0 && i < max_vars then vars.(i) <- c
                in
                List.iter filter_sub guess;
                if f vars then true
                else check_qexpr (next ())
    in
    check_qexpr stream

let match_rule concl premises rule =
    match rule with
    <match_rule>

let get_rulename name pos =
    try Hashtbl.find Ast.rulenames name
    with Not_found -> raise (InvalidRulename (name, pos))

let rec check_ast (concl, (rulename, rpos) , premises, pos) threshold =
    try
        let rule = get_rulename rulename rpos in
        let prems = match premises with <empty> -> [] | <premises> l -> l in
        if match_rule concl prems rule then
            (* ignore the number of abstractions on the top of the tree
                * the bound variables by these ones are thus seen as free
                * variables *)
            List.iter (fun (_, ast) -> check_ast ast threshold) prems
        else begin
            Printf.printf "At %s: Expression doesn't match the pattern of %s\n" (print_info pos) rulename
        end
    with
        | InvalidRulename (name, pos) ->
                Printf.printf "At %s:\nInvalid rulename: %s\n" (print_info pos) rulename
        | PremError (given, expect) ->
                Printf.printf "At %s:\nPremises number mismatch: %i given, but %i expected for the rule %s\n"
                    (print_info pos) given expect rulename
        | AbsError (given, expect, pos) ->
                Printf.printf "At %s:\nAbstractions number mismatch:\nThis judgement is nested %i time(s), but the rule %s expect a %i time(s) nested judgement for this premise\n"
                    (print_info pos) given rulename expect
        | JudgError (pos) ->
                Printf.printf "At %s:\nWrong judgement\n"
                (print_info pos)
        | UnknownError ->
                print_string "Internal error (it can happen when the parser is incorrect)\n"


